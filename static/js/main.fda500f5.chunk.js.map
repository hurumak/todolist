{"version":3,"sources":["serviceWorker.ts","utils/api/apiConfig.ts","constants/privates.ts","utils/api/todolists-api.ts","utils/error-utils.ts","utils/regex.ts","utils/helpers.ts","features/Auth/auth-reducer.ts","features/Application/actions.ts","features/Application/application-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","utils/api/types.ts","components/ui/TextInput/TextInput.tsx","components/business/AddItemForm/AddItemForm.tsx","components/ui/TextSpan/TextSpan.tsx","components/business/EditableSpan/EditableSpan.tsx","utils/redux-utils.ts","components/ui/CheckBox/CheckBox.tsx","components/ui/DeleteIcon/DeleteIcon.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","redux/selectors.ts","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/business/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","features/Application/App.tsx","features/Application/index.tsx","redux/combiner.ts","redux/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","settings","withCredentials","headers","process","axios","axiosInstance","create","baseURL","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","showError","appAsyncActions","setAppErrorAC","error","messages","length","setAppStatusAC","status","handleServerNetworkError","message","regex","email","isGoodResp","resultCode","isEmpty","value","login","createAsyncThunk","payload","rejectWithValue","isLoggedIn","captchaData","errors","fieldsErrors","field","url","logout","_","authSlice","createSlice","name","initialState","reducers","setIsLoggedInAC","state","action","extraReducers","builder","addCase","fulfilled","actions","authReducer","reducer","applicationActions","createAction","initializeApp","applicationReducer","isInitialized","removeTodolist","changeTodolistEntityStatusAC","addTodolist","item","changeTodolistTitle","fetchTodolists","todolists","asyncActions","sliceTodolist","changeTodolistFilter","index","findIndex","tl","filter","entityStatus","splice","unshift","map","todolistsReducer","TaskStatuses","TaskPriorities","fetchTasks","tasks","items","removeTask","addTask","updateTask","getState","task","find","t","apiModel","deadline","description","priority","startDate","tasksReducer","todolistsAsyncActions","forEach","todoListId","TextInput","React","memo","disabled","onKeyPress","onBlur","variant","autoFocus","customCss","onChangeHandler","label","TextField","helperText","style","onChange","e","currentTarget","AddItemForm","addItem","useState","setTitle","setError","addItemHandler","trim","display","justifyContent","alignItems","charCode","width","IconButton","color","onClick","AddBox","TextSpan","onDoubleClick","wordWrap","EditableSpan","editMode","setEditMode","useAppDispatch","useDispatch","useActions","useMemo","bindActionCreators","CheckBox","isChecked","Checkbox","checked","DeleteIcon","Delete","fontSize","Task","tasksActions","onClickHandler","useCallback","Completed","New","onTitleChangeHandler","newValue","key","className","Todolist","demo","todolist","todolistsActions","useEffect","onAddTask","thunk","rejected","errorMessage","onChangeTodolistTitle","onFilterChange","tasksForTodolist","Paper","padding","position","maxWidth","top","right","paddingTop","Button","appSelector","app","selectStatus","createDraftSafeSelector","selectIsInitialized","selectAppError","selectIsLoggedIn","auth","selectTodolists","selectTasks","TodolistsList","useSelector","onAddTodoList","Grid","container","spacing","wrap","overflowX","to","Alert","props","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","captchaUrl","setCaptchaUrl","formik","useFormik","validate","password","captcha","test","isEmail","undefined","initialValues","rememberMe","onSubmit","values","formikHelpers","setFieldValue","setFieldError","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","src","alt","App","appActions","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.fda500f5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'}\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import axiosInstance from \"axios\";\nimport { privateBaseUrl, privateApiKey } from \"constants/privates\";\n\nconst settings = {\n  withCredentials: true,\n  headers: {\n    'API-KEY': privateApiKey\n  }\n};\nexport const axios = axiosInstance.create({\n  baseURL: privateBaseUrl,\n  ...settings\n});\n","export const privateBaseUrl = process.env.REACT_APP_BASE_URL || 'https://social-network.samuraijs.com/api/1.1/'\nexport const privateApiKey = process.env.REACT_APP_API_KEY || '9091a712-8a54-450c-8198-ae2f370580e1'\n","import {\n  GetTasksResponse,\n  LoginParamsType,\n  ResponseType,\n  TaskType,\n  TodolistType,\n  UpdateTaskModelType\n} from './types';\nimport { axios } from \"./apiConfig\";\n\nexport const todolistsAPI = {\n  getTodolists() {\n    return axios.get<TodolistType[]>('todo-lists');\n  },\n  createTodolist(title: string) {\n    return axios.post<ResponseType<{item: TodolistType}>>('todo-lists', {\n      title\n    });\n  },\n  deleteTodolist(id: string) {\n    return axios.delete<ResponseType>(`todo-lists/${id}`);\n  },\n  updateTodolist(id: string, title: string) {\n    return axios.put<ResponseType>(`todo-lists/${id}`, {\n      title\n    });\n  },\n  getTasks(todolistId: string) {\n    return axios.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n  },\n  deleteTask(todolistId: string, taskId: string) {\n    return axios.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n  createTask(todolistId: string, taskTitile: string) {\n    return axios.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {\n      title: taskTitile\n    });\n  },\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n    return axios.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n  }\n};\n\nexport const authAPI = {\n  login(data: LoginParamsType) {\n    return axios.post<ResponseType<{userId?: number}>>('auth/login', data);\n  },\n  logout() {\n    return axios.delete<ResponseType<{userId?: number}>>('auth/login');\n  },\n  me() {\n    return axios.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\n  },\n  captcha() {\n    return axios.get<{url: string}>('security/get-captcha-url');\n  }\n};\n","import {appAsyncActions} from 'features/Application';\nimport {Dispatch} from 'redux';\nimport {AxiosError} from 'axios';\nimport {ResponseType} from './api/types';\n\nexport const handleServerAppError = <D>(\n  data: ResponseType<D>,\n  dispatch: Dispatch,\n  showError = true\n) => {\n  if (showError) {\n    dispatch(\n      appAsyncActions.setAppErrorAC({\n        error: data.messages.length ? data.messages[0] : 'Some error occurred'\n      })\n    );\n  }\n  dispatch(appAsyncActions.setAppStatusAC({status: 'failed'}));\n};\n\nexport const handleServerNetworkError = (\n  error: AxiosError,\n  dispatch: Dispatch,\n  showError = true\n) => {\n  if (showError) {\n    dispatch(\n      appAsyncActions.setAppErrorAC({\n        error: error.message ?? 'Some error occurred'\n      })\n    );\n  }\n  dispatch(appAsyncActions.setAppStatusAC({status: 'failed'}));\n};\n","export const regex = {\n  email:\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n};\n","import {ResponseType} from 'utils/api/types';\nimport {regex} from './regex';\n\nexport const isGoodResp = (data: ResponseType) => data.resultCode === 0;\n\nexport const isEmpty = (value: string | unknown[]) => value.length === 0;\n\nexport const isEmail = (email: string) => regex.email.test(email);\n","import {appAsyncActions} from '../Application';\nimport {authAPI} from 'utils/api/todolists-api';\nimport {handleServerAppError, handleServerNetworkError} from 'utils/error-utils';\nimport {PayloadAction, createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport {AxiosError} from 'axios';\nimport {ThunkError} from 'utils/types';\nimport {LoginParamsType} from 'utils/api/types';\nimport {isGoodResp} from 'utils/helpers';\n\nexport const login = createAsyncThunk<{isLoggedIn: boolean}, LoginParamsType, ThunkError>(\n  'auth/login',\n  async (payload, {dispatch, rejectWithValue}) => {\n    dispatch(appAsyncActions.setAppStatusAC({status: 'loading'}));\n    try {\n      const {data} = await authAPI.login(payload);\n      if (isGoodResp(data)) {\n        dispatch(appAsyncActions.setAppStatusAC({status: 'succeeded'}));\n        return {isLoggedIn: true};\n      } else if (data.resultCode === 10) {\n        handleServerAppError(data, dispatch);\n        const {data: captchaData} = await authAPI.captcha();\n        return rejectWithValue({\n          errors: [],\n          fieldsErrors: [{field: 'captcha', error: captchaData.url}]\n        });\n      } else {\n        handleServerAppError(data, dispatch);\n        return rejectWithValue({\n          errors: data.messages,\n          fieldsErrors: data.fieldsErrors\n        });\n      }\n    } catch (error) {\n      handleServerNetworkError(error as AxiosError, dispatch);\n      return rejectWithValue(null);\n    }\n  }\n);\n\nexport const logout = createAsyncThunk('auth/logout', async (_, {dispatch, rejectWithValue}) => {\n  dispatch(appAsyncActions.setAppStatusAC({status: 'loading'}));\n  try {\n    const {data} = await authAPI.logout();\n    if (isGoodResp(data)) {\n      dispatch(appAsyncActions.setAppStatusAC({status: 'succeeded'}));\n      return {isLoggedIn: false};\n    } else {\n      handleServerAppError(data, dispatch);\n      return rejectWithValue(null);\n    }\n  } catch (error) {\n    handleServerNetworkError(error as AxiosError, dispatch);\n    return rejectWithValue(null);\n  }\n});\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: {\n    isLoggedIn: false\n  },\n  reducers: {\n    setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>) {\n      state.isLoggedIn = action.payload.value;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(login.fulfilled, (state, action) => {\n        state.isLoggedIn = action.payload.isLoggedIn;\n      })\n      .addCase(logout.fulfilled, (state, action) => {\n        state.isLoggedIn = action.payload.isLoggedIn;\n      });\n  }\n});\n\nexport const {setIsLoggedInAC} = authSlice.actions;\nexport const authReducer = authSlice.reducer;\n","import {createAction} from '@reduxjs/toolkit';\nimport {RequestStatusType} from './types';\n\nconst setAppStatusAC = createAction<{status: RequestStatusType}>('application/setAppStatusAC');\nconst setAppErrorAC = createAction<{error: string | null}>('application/setAppErrorAC');\n\nexport const applicationActions = {\n  setAppStatusAC,\n  setAppErrorAC\n};\n","import {authAPI} from '../../utils/api/todolists-api';\nimport {setIsLoggedInAC} from '../Auth/auth-reducer';\nimport {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport {InitialStateType} from './types';\nimport {applicationActions} from './actions';\nimport {isGoodResp} from '../../utils/helpers';\n\nexport const initializeApp = createAsyncThunk(\n  'application/initializeApp',\n  async (_, {dispatch, rejectWithValue}) => {\n    try {\n      const {data} = await authAPI.me();\n      if (isGoodResp(data)) {\n        dispatch(setIsLoggedInAC({value: true}));\n      }\n      dispatch(initializeApp.fulfilled);\n    } catch {\n      return rejectWithValue(null);\n    }\n  }\n);\n\nexport const applicationSlice = createSlice({\n  name: 'application',\n  initialState: {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n  } as InitialStateType,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(initializeApp.fulfilled, (state) => {\n      state.isInitialized = true;\n    });\n    builder.addCase(applicationActions.setAppStatusAC, (state, action) => {\n      state.status = action.payload.status;\n    });\n    builder.addCase(applicationActions.setAppErrorAC, (state, action) => {\n      state.error = action.payload.error;\n    });\n  }\n});\n\nexport const applicationReducer = applicationSlice.reducer;\n","import {todolistsAPI} from 'utils/api/todolists-api';\nimport {appAsyncActions} from 'features/Application';\nimport {PayloadAction, createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport {handleServerAppError, handleServerNetworkError} from 'utils/error-utils';\nimport {AxiosError} from 'axios';\nimport {ThunkError} from 'utils/types';\nimport {TodolistType} from 'utils/api/types';\nimport {RequestStatusType} from 'features/Application/types';\nimport {isGoodResp} from 'utils/helpers';\n\nconst {setAppStatusAC} = appAsyncActions;\n\nconst initialState: Array<TodolistDomainType> = [];\n\nconst removeTodolist = createAsyncThunk(\n  'todolists/removeTodolist',\n  async (todolistId: string, {dispatch, rejectWithValue}) => {\n    dispatch(setAppStatusAC({status: 'loading'}));\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}));\n    try {\n      await todolistsAPI.deleteTodolist(todolistId);\n      dispatch(setAppStatusAC({status: 'succeeded'}));\n      return {id: todolistId};\n    } catch {\n      dispatch(setAppStatusAC({status: 'failed'}));\n      return rejectWithValue(null);\n    }\n  }\n);\n\nconst addTodolist = createAsyncThunk<TodolistType, string, ThunkError>(\n  'todolists/addTodolist',\n  async (title, {dispatch, rejectWithValue}) => {\n    dispatch(setAppStatusAC({status: 'loading'}));\n    try {\n      const {data} = await todolistsAPI.createTodolist(title);\n      if (isGoodResp(data)) {\n        dispatch(setAppStatusAC({status: 'succeeded'}));\n        return data.data.item;\n      } else {\n        handleServerAppError(data, dispatch, false);\n        return rejectWithValue({\n          errors: data.messages,\n          fieldsErrors: data.fieldsErrors\n        });\n      }\n    } catch {\n      dispatch(setAppStatusAC({status: 'failed'}));\n      return rejectWithValue(null);\n    }\n  }\n);\n\nconst changeTodolistTitle = createAsyncThunk(\n  'todolists/changeTodolistTitle',\n  async (payload: {id: string; title: string}, {rejectWithValue, dispatch}) => {\n    try {\n      const {data} = await todolistsAPI.updateTodolist(payload.id, payload.title);\n      if (isGoodResp(data)) {\n        return payload;\n      } else {\n        handleServerAppError(data, dispatch);\n        return rejectWithValue(null);\n      }\n    } catch {\n      return rejectWithValue(null);\n    }\n  }\n);\n\nconst fetchTodolists = createAsyncThunk(\n  'todolists/fetchTodolists',\n  async (_, {dispatch, rejectWithValue}) => {\n    dispatch(setAppStatusAC({status: 'loading'}));\n    try {\n      const {data} = await todolistsAPI.getTodolists();\n      dispatch(setAppStatusAC({status: 'succeeded'}));\n      return {todolists: data};\n    } catch (error) {\n      handleServerNetworkError(error as AxiosError, dispatch);\n      return rejectWithValue(null);\n    }\n  }\n);\n\nexport const asyncActions = {\n  removeTodolist,\n  addTodolist,\n  changeTodolistTitle,\n  fetchTodolists\n};\n\nexport const sliceTodolist = createSlice({\n  name: 'todolists',\n  initialState,\n  reducers: {\n    changeTodolistFilter(state, action: PayloadAction<{id: string; filter: FilterValuesType}>) {\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\n      if (index >= 0) {\n        state[index].filter = action.payload.filter;\n      }\n    },\n    changeTodolistEntityStatusAC(\n      state,\n      action: PayloadAction<{id: string; status: RequestStatusType}>\n    ) {\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\n      if (index >= 0) {\n        state[index].entityStatus = action.payload.status;\n      }\n    }\n  },\n  extraReducers: (builder) => {\n    builder.addCase(removeTodolist.fulfilled, (state, action) => {\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\n      if (index >= 0) {\n        state.splice(index, 1);\n      }\n    });\n    builder.addCase(addTodolist.fulfilled, (state, action) => {\n      state.unshift({...action.payload, filter: 'all', entityStatus: 'idle'});\n    });\n    builder.addCase(changeTodolistTitle.fulfilled, (state, action) => {\n      const index = state.findIndex((tl) => tl.id === action.payload.id);\n      if (index >= 0) {\n        state[index].title = action.payload.title;\n      }\n    });\n    builder.addCase(fetchTodolists.fulfilled, (state, action) => {\n      return action.payload.todolists.map((tl) => ({\n        ...tl,\n        filter: 'all',\n        entityStatus: 'idle'\n      }));\n    });\n  }\n});\n\nexport const todolistsReducer = sliceTodolist.reducer;\nexport const {changeTodolistFilter, changeTodolistEntityStatusAC} = sliceTodolist.actions;\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterValuesType;\n  entityStatus: RequestStatusType;\n};\n","import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';\nimport {todolistsAPI} from '../../utils/api/todolists-api';\nimport {asyncActions as todolistsAsyncActions} from './todolists-reducer';\nimport {appAsyncActions} from '../Application';\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils';\nimport {AxiosError} from 'axios';\nimport {AppRootStateType, ThunkError} from '../../utils/types';\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../utils/api/types';\nimport {isGoodResp} from '../../utils/helpers';\n\nconst {setAppStatusAC} = appAsyncActions;\n\nconst initialState: TasksStateType = {};\n\nconst fetchTasks = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, {dispatch}) => {\n  dispatch(setAppStatusAC({status: 'loading'}));\n  const {data} = await todolistsAPI.getTasks(todolistId);\n  dispatch(setAppStatusAC({status: 'succeeded'}));\n  return {tasks: data.items, todolistId};\n});\n\nconst removeTask = createAsyncThunk(\n  'tasks/removeTask',\n  async (payload: {taskId: string; todolistId: string}) => {\n    await todolistsAPI.deleteTask(payload.todolistId, payload.taskId);\n    return payload;\n  }\n);\n\nconst addTask = createAsyncThunk<TaskType, {title: string; todolistId: string}, ThunkError>(\n  'tasks/addTask',\n  async (payload, {dispatch, rejectWithValue}) => {\n    try {\n      const {data} = await todolistsAPI.createTask(payload.todolistId, payload.title);\n      if (isGoodResp(data)) {\n        dispatch(setAppStatusAC({status: 'succeeded'}));\n        return data.data.item;\n      } else {\n        handleServerAppError(data, dispatch, false);\n        return rejectWithValue({\n          errors: data.messages,\n          fieldsErrors: data.fieldsErrors\n        });\n      }\n    } catch (error) {\n      handleServerNetworkError(error as AxiosError, dispatch);\n      return rejectWithValue(null);\n    }\n  }\n);\n\nconst updateTask = createAsyncThunk<UpdateTask, UpdateTask>(\n  'tasks/updateTask',\n  async ({taskId, todolistId, model}, {dispatch, getState, rejectWithValue}) => {\n    const state = getState() as AppRootStateType;\n    const task = state.tasks[todolistId].find((t) => t.id === taskId);\n    if (!task) {\n      return rejectWithValue(null);\n    }\n    const apiModel: UpdateTaskModelType = {\n      deadline: task.deadline,\n      description: task.description,\n      priority: task.priority,\n      startDate: task.startDate,\n      title: task.title,\n      status: task.status,\n      ...model\n    };\n    try {\n      const {data} = await todolistsAPI.updateTask(todolistId, taskId, apiModel);\n      if (isGoodResp(data)) {\n        return {taskId, model, todolistId};\n      } else {\n        handleServerAppError(data, dispatch);\n        return rejectWithValue(null);\n      }\n    } catch (error) {\n      handleServerNetworkError(error as AxiosError, dispatch);\n      return rejectWithValue(null);\n    }\n  }\n);\n\nexport const asyncActions = {updateTask, addTask, removeTask, fetchTasks};\n\nconst sliceTasks = createSlice({\n  name: 'tasks',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(todolistsAsyncActions.addTodolist.fulfilled, (state, action) => {\n      state[action.payload.id] = [];\n    });\n    builder.addCase(todolistsAsyncActions.removeTodolist.fulfilled, (state, action) => {\n      delete state[action.payload.id];\n    });\n    builder.addCase(todolistsAsyncActions.fetchTodolists.fulfilled, (state, action) => {\n      action.payload.todolists.forEach((tl) => {\n        state[tl.id] = [];\n      });\n    });\n    builder.addCase(fetchTasks.fulfilled, (state, action) => {\n      state[action.payload.todolistId] = action.payload.tasks;\n    });\n    builder.addCase(removeTask.fulfilled, (state, action) => {\n      const tasks = state[action.payload.todolistId];\n      const index = tasks.findIndex((task) => task.id === action.payload.taskId);\n      if (index >= 0) {\n        tasks.splice(index, 1);\n      }\n    });\n    builder.addCase(addTask.fulfilled, (state, action) => {\n      state[action.payload.todoListId].unshift(action.payload);\n    });\n    builder.addCase(updateTask.fulfilled, (state, action) => {\n      const tasks = state[action.payload.todolistId];\n      const index = tasks.findIndex((task) => task.id === action.payload.taskId);\n      if (index) {\n        tasks[index] = {...tasks[index], ...action.payload.model};\n      }\n    });\n  }\n});\n\nexport type UpdateDomainTaskModelType = {\n  title?: string;\n  description?: string;\n  status?: TaskStatuses;\n  priority?: TaskPriorities;\n  startDate?: string;\n  deadline?: string;\n};\nexport type TasksStateType = {\n  [key: string]: Array<TaskType>;\n};\n\ninterface UpdateTask {\n  taskId: string;\n  model: UpdateDomainTaskModelType;\n  todolistId: string;\n}\n\nexport const tasksReducer = sliceTasks.reducer;\n","export type TodolistType = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\n\nexport type FieldErrorType = {\n  field: string;\n  error: string;\n};\n\nexport type ResponseType<D = {}> = {\n  resultCode: number;\n  messages: Array<string>;\n  fieldsErrors?: Array<FieldErrorType>;\n  data: D;\n};\n\nexport enum TaskStatuses {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3\n}\n\nexport enum TaskPriorities {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4\n}\n\nexport type TaskType = {\n  description: string;\n  title: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatuses;\n  priority: TaskPriorities;\n  startDate: string;\n  deadline: string;\n};\n\nexport type GetTasksResponse = {\n  error: string | null;\n  totalCount: number;\n  items: TaskType[];\n};\n\nexport type LoginParamsType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\n","import React, {KeyboardEvent} from 'react';\nimport {TextField} from '@material-ui/core';\n\ninterface TextInputProps {\n  disabled?: boolean;\n  error?: string | null;\n  title: string;\n  variant?: 'outlined' | 'standard' | 'filled';\n  autoFocus?: boolean;\n  label?: string;\n  customCss?: React.CSSProperties;\n  onBlur?: () => void;\n  onChangeHandler: (title: string) => void;\n  onKeyPress?: (e: KeyboardEvent<HTMLInputElement>) => void;\n}\n\nexport const TextInput: React.FC<TextInputProps> = React.memo(\n  ({\n    error,\n    disabled,\n    onKeyPress = () => null,\n    onBlur = () => null,\n    variant = 'outlined',\n    autoFocus = false,\n    customCss = {},\n    title,\n    onChangeHandler,\n    label\n  }) => {\n    return (\n      <TextField\n        variant={variant}\n        disabled={disabled}\n        error={!!error}\n        value={title}\n        label={label}\n        helperText={error}\n        autoFocus={autoFocus}\n        style={customCss}\n        onBlur={onBlur}\n        onKeyPress={onKeyPress}\n        onChange={(e) => onChangeHandler(e.currentTarget.value)}\n      />\n    );\n  }\n);\n","import React, {KeyboardEvent, useState} from 'react';\nimport {IconButton} from '@material-ui/core';\nimport {AddBox} from '@material-ui/icons';\nimport {AddItemHelpers} from 'features/TodolistsList/TodolistsList';\nimport {TextInput} from 'components/ui/TextInput';\n\ntype AddItemFormPropsType = {\n  addItem: (title: string, helpers: AddItemHelpers) => void;\n  disabled?: boolean;\n};\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(\n  ({addItem, disabled = false}) => {\n    const [title, setTitle] = useState('');\n    const [error, setError] = useState<string | null>(null);\n\n    const addItemHandler = () => {\n      if (title.trim() !== '') {\n        addItem(title, {setError, setTitle});\n      } else {\n        setError('Title is required');\n      }\n    };\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n      if (error !== null) {\n        setError(null);\n      }\n      if (e.charCode === 13) {\n        addItemHandler();\n      }\n    };\n\n    return (\n      <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start'}}>\n        <TextInput\n          title={title}\n          error={error}\n          onKeyPress={onKeyPressHandler}\n          onChangeHandler={setTitle}\n          disabled={disabled}\n          label={'Title'}\n          customCss={{width: '300px'}}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n          <AddBox />\n        </IconButton>\n      </div>\n    );\n  }\n);\n","import React from 'react';\n\ninterface TextSpanProps {\n  value: string;\n  onDoubleClick: () => void;\n}\n\nexport const TextSpan: React.FC<TextSpanProps> = React.memo(({value, onDoubleClick}) => {\n  return (\n    <span onDoubleClick={onDoubleClick} style={{wordWrap: 'break-word'}}>\n      {value}\n    </span>\n  );\n});\n","import React, {useState} from 'react';\nimport {TextSpan} from 'components/ui/TextSpan/TextSpan';\nimport {TextInput} from 'components/ui/TextInput/TextInput';\n\ninterface EditableSpanProps {\n  value: string;\n  onChange: (newValue: string) => void;\n}\n\nexport const EditableSpan: React.FC<EditableSpanProps> = React.memo(({value, onChange}) => {\n  const [editMode, setEditMode] = useState(false);\n  const [title, setTitle] = useState(value);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n    setTitle(value);\n  };\n\n  const activateViewMode = () => {\n    setEditMode(false);\n    onChange(title);\n  };\n\n  return (\n    <>\n      {editMode && (\n        <TextInput\n          variant=\"standard\"\n          title={title}\n          onChangeHandler={setTitle}\n          autoFocus\n          onBlur={activateViewMode}\n        />\n      )}\n      {!editMode && <TextSpan value={value} onDoubleClick={activateEditMode} />}\n    </>\n  );\n});\n","import { ActionCreatorsMapObject, bindActionCreators } from 'redux';\nimport { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { AppDispatchType } from './types';\n\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();\n\nexport const useActions = <T extends ActionCreatorsMapObject>(actions: T) => {\n  const dispatch = useAppDispatch();\n  return useMemo(() => {\n    return bindActionCreators(actions, dispatch);\n  }, [dispatch, actions]);\n};\n","import React from 'react';\nimport {Checkbox} from '@material-ui/core';\n\ninterface CheckBoxProps {\n  isChecked: boolean;\n  color?: 'primary' | 'secondary' | 'default';\n  onChangeHandler: (isChecked: boolean) => void;\n}\n\nexport const CheckBox: React.FC<CheckBoxProps> = React.memo(\n  ({isChecked, onChangeHandler, color = 'primary'}) => {\n    return (\n      <Checkbox\n        checked={isChecked}\n        onChange={(e) => onChangeHandler(e.currentTarget.checked)}\n        color={color}\n      />\n    );\n  }\n);\n","import React from 'react';\nimport {Delete} from '@material-ui/icons';\nimport {IconButton} from '@material-ui/core';\n\ninterface DeleteIconProps {\n  onClick: () => void;\n}\n\nexport const DeleteIcon: React.FC<DeleteIconProps> = React.memo(({onClick}) => {\n  return (\n    <IconButton onClick={onClick}>\n      <Delete fontSize=\"small\" />\n    </IconButton>\n  );\n});\n","import React, {useCallback} from 'react';\nimport {EditableSpan} from 'components/business/EditableSpan/EditableSpan';\nimport {tasksActions} from '../../index';\nimport {useActions} from 'utils/redux-utils';\nimport {TaskStatuses, TaskType} from 'utils/api/types';\nimport {CheckBox} from 'components/ui/CheckBox/CheckBox';\nimport {DeleteIcon} from 'components/ui/DeleteIcon/DeleteIcon';\n\ninterface TaskProps {\n  task: TaskType;\n  todolistId: string;\n}\n\nexport const Task: React.FC<TaskProps> = React.memo(({task, todolistId}) => {\n  const {removeTask, updateTask} = useActions(tasksActions);\n\n  const onClickHandler = useCallback(\n    () => removeTask({taskId: task.id, todolistId}),\n    [task.id, todolistId]\n  );\n\n  const onChangeHandler = useCallback(\n    (isChecked: boolean) => {\n      const status = isChecked ? TaskStatuses.Completed : TaskStatuses.New;\n      updateTask({taskId: task.id, model: {status}, todolistId});\n    },\n    [task.id, todolistId]\n  );\n\n  const onTitleChangeHandler = useCallback(\n    (newValue: string) => {\n      updateTask({taskId: task.id, model: {title: newValue}, todolistId});\n    },\n    [task.id, todolistId]\n  );\n\n  return (\n    <div key={task.id} className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n      <CheckBox\n        isChecked={task.status === TaskStatuses.Completed}\n        onChangeHandler={onChangeHandler}\n      />\n      <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\n      <DeleteIcon onClick={onClickHandler} />\n    </div>\n  );\n});\n","import React, {useCallback, useEffect} from 'react';\nimport {AddItemForm} from 'components/business/AddItemForm/AddItemForm';\nimport {EditableSpan} from 'components/business/EditableSpan/EditableSpan';\nimport {Button, IconButton, Paper} from '@material-ui/core';\nimport {Delete} from '@material-ui/icons';\nimport {Task} from './Task/Task';\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer';\nimport {tasksActions, todolistsActions} from '../index';\nimport {AddItemHelpers} from '../TodolistsList';\nimport {useActions, useAppDispatch} from 'utils/redux-utils';\nimport {TaskStatuses, TaskType} from 'utils/api/types';\nimport {isEmpty} from '../../../utils/helpers';\n\ninterface TodolistProps {\n  todolist: TodolistDomainType;\n  tasks: Array<TaskType>;\n  demo?: boolean;\n}\n\nexport const Todolist: React.FC<TodolistProps> = React.memo(({demo = false, todolist, tasks}) => {\n  const {changeTodolistFilter, removeTodolist, changeTodolistTitle} = useActions(todolistsActions);\n  const {fetchTasks} = useActions(tasksActions);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (demo) {\n      return;\n    }\n    fetchTasks(todolist.id);\n  }, []);\n\n  const onAddTask = useCallback(\n    async (title: string, {setTitle, setError}: AddItemHelpers) => {\n      const thunk = tasksActions.addTask({title, todolistId: todolist.id});\n      const action = await dispatch(thunk);\n      if (tasksActions.addTask.rejected.match(action)) {\n        if (action.payload?.errors?.length) {\n          const errorMessage = action.payload?.errors[0];\n          setError(errorMessage);\n        } else {\n          setError('Some error occurred');\n        }\n      } else {\n        setTitle('');\n      }\n    },\n    [todolist.id]\n  );\n\n  const onRemoveTodolist = () => {\n    removeTodolist(todolist.id);\n  };\n  const onChangeTodolistTitle = useCallback(\n    (title: string) => {\n      changeTodolistTitle({id: todolist.id, title});\n    },\n    [todolist.id]\n  );\n\n  const onFilterChange = useCallback(\n    (filter: FilterValuesType) => {\n      changeTodolistFilter({filter, id: todolist.id});\n    },\n    [todolist.id]\n  );\n\n  let tasksForTodolist = tasks;\n\n  if (todolist.filter === 'active') {\n    tasksForTodolist = tasks.filter((t) => t.status === TaskStatuses.New);\n  }\n  if (todolist.filter === 'completed') {\n    tasksForTodolist = tasks.filter((t) => t.status === TaskStatuses.Completed);\n  }\n\n  return (\n    <Paper style={{padding: '10px', width: '300px', position: 'relative'}}>\n      <h3 style={{maxWidth: '250px'}}>\n        <EditableSpan value={todolist.title} onChange={onChangeTodolistTitle} />\n        <IconButton\n          onClick={onRemoveTodolist}\n          disabled={todolist.entityStatus === 'loading'}\n          style={{\n            position: 'absolute',\n            top: '5px',\n            right: '5px'\n          }}>\n          <Delete fontSize=\"small\" />\n        </IconButton>\n      </h3>\n      <AddItemForm addItem={onAddTask} disabled={todolist.entityStatus === 'loading'} />\n      <div>\n        {tasksForTodolist.map((t) => (\n          <Task key={t.id} task={t} todolistId={todolist.id} />\n        ))}\n        {isEmpty(tasksForTodolist) && <div style={{padding: '10px', color: 'grey'}}>No tasks</div>}\n      </div>\n      <div style={{paddingTop: '10px'}}>\n        <Button\n          variant={todolist.filter === 'all' ? 'outlined' : 'text'}\n          onClick={() => onFilterChange('all')}\n          color={'default'}>\n          All\n        </Button>\n        <Button\n          variant={todolist.filter === 'active' ? 'outlined' : 'text'}\n          onClick={() => onFilterChange('active')}\n          color={'primary'}>\n          Active\n        </Button>\n        <Button\n          variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\n          onClick={() => onFilterChange('completed')}\n          color={'secondary'}>\n          Completed\n        </Button>\n      </div>\n    </Paper>\n  );\n});\n","import {AppRootStateType} from 'utils/types';\nimport {createDraftSafeSelector} from '@reduxjs/toolkit';\n\nconst appSelector = (state: AppRootStateType) => state.app;\nconst authSelector = (state: AppRootStateType) => state.auth;\nconst todolistsSelector = (state: AppRootStateType) => state.todolists;\nconst tasksSelector = (state: AppRootStateType) => state.tasks;\n\nexport const selectStatus = createDraftSafeSelector([appSelector], (app) => app.status);\nexport const selectIsInitialized = createDraftSafeSelector(\n  [appSelector],\n  (app) => app.isInitialized\n);\nexport const selectAppError = createDraftSafeSelector([appSelector], (app) => app.error);\nexport const selectIsLoggedIn = createDraftSafeSelector([authSelector], (auth) => auth.isLoggedIn);\nexport const selectTodolists = createDraftSafeSelector(\n  [todolistsSelector],\n  (todolists) => todolists\n);\nexport const selectTasks = createDraftSafeSelector([tasksSelector], (tasks) => tasks);\n","import React, {useCallback, useEffect} from 'react';\nimport {useSelector} from 'react-redux';\nimport {Grid} from '@material-ui/core';\nimport {AddItemForm} from 'components/business/AddItemForm';\nimport {Todolist} from './Todolist/Todolist';\nimport {Redirect} from 'react-router-dom';\nimport {todolistsActions} from './index';\nimport {useActions, useAppDispatch} from 'utils/redux-utils';\nimport {selectIsLoggedIn, selectTasks, selectTodolists} from 'redux/selectors';\n\ntype PropsType = {\n  demo?: boolean;\n};\n\nexport type AddItemHelpers = {\n  setError: (error: string) => void;\n  setTitle: (title: string) => void;\n};\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n  const todolists = useSelector(selectTodolists);\n  const tasks = useSelector(selectTasks);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n\n  const {fetchTodolists} = useActions(todolistsActions);\n  const dispatch = useAppDispatch();\n\n  const onAddTodoList = useCallback(async (title: string, {setTitle, setError}: AddItemHelpers) => {\n    const thunk = todolistsActions.addTodolist(title);\n    const action = await dispatch(thunk);\n    if (todolistsActions.addTodolist.rejected.match(action)) {\n      if (action.payload?.errors?.length) {\n        const errorMessage = action.payload?.errors[0];\n        setError(errorMessage);\n      } else {\n        setError('Some error occurred');\n      }\n    } else {\n      setTitle('');\n    }\n  }, []);\n\n  useEffect(() => {\n    if (demo || !isLoggedIn) {\n      return;\n    }\n    fetchTodolists();\n  }, []);\n\n  if (!isLoggedIn) {\n    return <Redirect to={'/login'} />;\n  }\n\n  return (\n    <>\n      <Grid container style={{padding: '20px'}}>\n        <AddItemForm addItem={onAddTodoList} />\n      </Grid>\n      <Grid container spacing={3} wrap=\"nowrap\" style={{overflowX: 'auto'}}>\n        {todolists.map((tl) => {\n          return (\n            <Grid item key={tl.id}>\n              <Todolist todolist={tl} tasks={tasks[tl.id]} demo={demo} />\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n","import {sliceTodolist, asyncActions as todolistsAsyncActions} from './todolists-reducer';\nimport {asyncActions as tasksActions} from './tasks-reducer';\nimport {TodolistsList} from './TodolistsList';\nexport {todolistsReducer} from './todolists-reducer';\nexport {tasksReducer} from './tasks-reducer';\n\nconst todolistsActions = {\n  ...todolistsAsyncActions,\n  ...sliceTodolist.actions\n};\n\nexport {tasksActions, todolistsActions, TodolistsList};\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {appAsyncActions} from 'features/Application';\nimport {useActions} from 'utils/redux-utils';\nimport {selectAppError} from 'redux/selectors';\n\nconst Alert = (props: AlertProps) => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nexport const ErrorSnackbar = () => {\n  const error = useSelector(selectAppError);\n  const dispatch = useDispatch();\n  const {setAppErrorAC} = useActions(appAsyncActions);\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppErrorAC({error: null}));\n  };\n\n  return (\n    <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React, {useState} from 'react';\nimport {\n  Button,\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  Grid,\n  TextField\n} from '@material-ui/core';\nimport {useFormik} from 'formik';\nimport {useSelector} from 'react-redux';\nimport {login} from './auth-reducer';\nimport {Redirect} from 'react-router-dom';\nimport {useAppDispatch} from '../../utils/redux-utils';\nimport {selectIsLoggedIn} from '../../redux/selectors';\nimport {isEmail, isEmpty} from '../../utils/helpers';\n\ninterface FormikValues {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n}\n\nexport const Login = () => {\n  const dispatch = useAppDispatch();\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const [captchaUrl, setCaptchaUrl] = useState('');\n\n  const formik = useFormik<FormikValues>({\n    validate: ({email, password, captcha}) => {\n      if (isEmpty(email)) {\n        return {\n          email: 'Email is required'\n        };\n      }\n      if (!isEmail(email)) {\n        return {\n          email: 'Invalid email address'\n        };\n      }\n      if (isEmpty(password)) {\n        return {\n          password: 'Password is required'\n        };\n      }\n      if (!isEmpty(captchaUrl) && captcha !== undefined && isEmpty(captcha)) {\n        return {\n          captcha: 'Captcha is required'\n        };\n      }\n    },\n    initialValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n      captcha: undefined\n    },\n    onSubmit: async (values, formikHelpers) => {\n      const action = await dispatch(login(values));\n      if (login.rejected.match(action)) {\n        if (action.payload?.fieldsErrors?.length) {\n          action.payload?.fieldsErrors?.map((error) => {\n            if (error.field === 'captcha') {\n              setCaptchaUrl(error.error);\n              formikHelpers.setFieldValue(error.field, '');\n            }\n            formikHelpers.setFieldError(error.field, error.error);\n          });\n        }\n      }\n    }\n  });\n\n  if (isLoggedIn) {\n    return <Redirect to={'/'} />;\n  }\n\n  return (\n    <Grid container justifyContent=\"center\">\n      <Grid item xs={4}>\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered{' '}\n                <a\n                  href={'https://social-network.samuraijs.com/'}\n                  target={'_blank'}\n                  rel=\"noopener noreferrer\">\n                  here\n                </a>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p> Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps('email')} />\n              {formik.touched.email && formik.errors.email && <div>{formik.errors.email}</div>}\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps('password')}\n              />\n              {formik.touched.password && formik.errors.password && (\n                <div>{formik.errors.password}</div>\n              )}\n              <FormControlLabel\n                label={'Remember me'}\n                control={\n                  <Checkbox\n                    {...formik.getFieldProps('rememberMe')}\n                    checked={formik.values.rememberMe}\n                  />\n                }\n              />\n              {captchaUrl.length > 0 && (\n                <>\n                  <img src={captchaUrl} alt=\"captcha\" />\n                  <TextField\n                    type=\"captcha\"\n                    label=\"Captcha\"\n                    margin=\"normal\"\n                    {...formik.getFieldProps('captcha')}\n                  />\n                  {formik.errors.captcha && <div>{formik.errors.captcha}</div>}\n                </>\n              )}\n              <Button type={'submit'} variant={'contained'} color={'primary'}>\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, {useCallback, useEffect} from 'react';\nimport {\n  AppBar,\n  Button,\n  CircularProgress,\n  Container,\n  IconButton,\n  LinearProgress,\n  Toolbar,\n  Typography\n} from '@material-ui/core';\nimport {Menu} from '@material-ui/icons';\nimport {TodolistsList} from 'features/TodolistsList';\nimport {ErrorSnackbar} from 'components/business/ErrorSnackbar';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {appActions} from 'features/Application';\nimport {Route} from 'react-router-dom';\nimport {Login} from 'features/Auth';\nimport {logout} from 'features/Auth/auth-reducer';\nimport {selectIsInitialized, selectIsLoggedIn, selectStatus} from 'redux/selectors';\n\nexport const App: React.FC = () => {\n  const status = useSelector(selectStatus);\n  const isInitialized = useSelector(selectIsInitialized);\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isInitialized) {\n      dispatch(appActions.initializeApp());\n    }\n  }, []);\n\n  const logoutHandler = useCallback(() => {\n    dispatch(logout());\n  }, []);\n\n  if (!isInitialized) {\n    return (\n      <div style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n        <CircularProgress />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <ErrorSnackbar />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n            <Menu />\n          </IconButton>\n          <Typography variant=\"h6\">News</Typography>\n          {isLoggedIn && (\n            <Button color=\"inherit\" onClick={logoutHandler}>\n              Log out\n            </Button>\n          )}\n        </Toolbar>\n        {status === 'loading' && <LinearProgress />}\n      </AppBar>\n      <Container fixed>\n        <Route exact path={'/'} render={() => <TodolistsList demo={false} />} />\n        <Route path={'/login'} render={() => <Login />} />\n      </Container>\n    </div>\n  );\n};\n","import {applicationReducer, initializeApp} from './application-reducer';\nimport {applicationActions as appAsyncActions} from './actions';\nimport { App } from './App';\n\nconst appActions = {\n  initializeApp\n};\n\nexport {appActions, appAsyncActions, applicationReducer, App};\n","import { combineReducers } from \"redux\";\nimport { tasksReducer, todolistsReducer } from \"../features/TodolistsList\";\nimport { applicationReducer } from \"../features/Application\";\nimport { authReducer } from \"../features/Auth\";\n\nexport const rootReducer = combineReducers({\n  tasks: tasksReducer,\n  todolists: todolistsReducer,\n  app: applicationReducer,\n  auth: authReducer\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport thunkMiddleware from 'redux-thunk';\nimport { rootReducer } from \"./combiner\";\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\n});\n\nif (process.env.NODE_ENV === 'development') {\n  // @ts-ignore\n  window.store = store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {App} from './features/Application';\nimport {store} from './redux/store';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}